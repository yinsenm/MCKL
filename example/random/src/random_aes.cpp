//============================================================================
// MCKL/example/random/src/random_aes.cpp
//----------------------------------------------------------------------------
// MCKL: Monte Carlo Kernel Library
//----------------------------------------------------------------------------
// Copyright (c) 2013-2016, Yan Zhou
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
//   Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE);
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//============================================================================

#include <mckl/random/aesni.hpp>

#define MCKL_EXAMPLE_RANDOM_AES(N)                                            \
    typename mckl::AES##N::generator_type generator##N;                       \
    typename mckl::AES##N::key_type test_key##N;                              \
    typename mckl::AES##N::ctr_type test_vec##N;                              \
    std::array<typename mckl::AES##N::ctr_type, 4> test_ctr##N;               \
    std::array<typename mckl::AES##N::ctr_type, 4> test_res##N;               \
    std::memcpy(test_key##N.data(), key##N, sizeof(test_key##N));             \
    std::memcpy(test_vec##N.data(), vec##N, sizeof(test_vec##N));             \
    std::memcpy(test_ctr##N.data(), ctr##N, sizeof(test_ctr##N));             \
    generator##N.reset(test_key##N);                                          \
    for (std::size_t i = 0; i != test_vec##N.size(); ++i)                     \
        test_vec##N[i] = test_ctr##N[0][i] ^ test_vec##N[i];                  \
    generator##N.enc(test_vec##N.data(), test_res##N[0].data());              \
    for (std::size_t i = 0; i != test_vec##N.size(); ++i)                     \
        test_vec##N[i] = test_ctr##N[1][i] ^ test_res##N[0][i];               \
    generator##N.enc(test_vec##N.data(), test_res##N[1].data());              \
    for (std::size_t i = 0; i != test_vec##N.size(); ++i)                     \
        test_vec##N[i] = test_ctr##N[2][i] ^ test_res##N[1][i];               \
    generator##N.enc(test_vec##N.data(), test_res##N[2].data());              \
    for (std::size_t i = 0; i != test_vec##N.size(); ++i)                     \
        test_vec##N[i] = test_ctr##N[3][i] ^ test_res##N[2][i];               \
    generator##N.enc(test_vec##N.data(), test_res##N[3].data());              \
    bool pass##N =                                                            \
        std::memcmp(test_res##N.data(), res##N, sizeof(test_res##N)) == 0;    \
    std::cout << std::setw(16) << std::left << std::string("AES-" #N ":")     \
              << (pass##N ? "Passed" : "Failed") << std::endl;

static const std::uint8_t key128[] = {0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2,
    0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C};

static const std::uint8_t key192[] = {0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64,
    0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA,
    0xD2, 0x52, 0x2C, 0x6B, 0x7B};

static const std::uint8_t key256[] = {0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71,
    0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C,
    0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF,
    0xF4};

static const std::uint8_t ctr128[] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F,
    0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A,
    0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E,
    0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1,
    0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B,
    0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10};

static const std::uint8_t ctr192[] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F,
    0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A,
    0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E,
    0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1,
    0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B,
    0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10};

static const std::uint8_t ctr256[] = {0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F,
    0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0xAE, 0x2D, 0x8A,
    0x57, 0x1E, 0x03, 0xAC, 0x9C, 0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E,
    0x51, 0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11, 0xE5, 0xFB, 0xC1,
    0x19, 0x1A, 0x0A, 0x52, 0xEF, 0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B,
    0x17, 0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10};

static const std::uint8_t vec128[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

static const std::uint8_t vec192[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

static const std::uint8_t vec256[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

static const std::uint8_t res128[] = {0x76, 0x49, 0xAB, 0xAC, 0x81, 0x19, 0xB2,
    0x46, 0xCE, 0xE9, 0x8E, 0x9B, 0x12, 0xE9, 0x19, 0x7D, 0x50, 0x86, 0xCB,
    0x9B, 0x50, 0x72, 0x19, 0xEE, 0x95, 0xDB, 0x11, 0x3A, 0x91, 0x76, 0x78,
    0xB2, 0x73, 0xBE, 0xD6, 0xB8, 0xE3, 0xC1, 0x74, 0x3B, 0x71, 0x16, 0xE6,
    0x9E, 0x22, 0x22, 0x95, 0x16, 0x3F, 0xF1, 0xCA, 0xA1, 0x68, 0x1F, 0xAC,
    0x09, 0x12, 0x0E, 0xCA, 0x30, 0x75, 0x86, 0xE1, 0xA7};

static const std::uint8_t res192[] = {0x4F, 0x02, 0x1D, 0xB2, 0x43, 0xBC, 0x63,
    0x3D, 0x71, 0x78, 0x18, 0x3A, 0x9F, 0xA0, 0x71, 0xE8, 0xB4, 0xD9, 0xAD,
    0xA9, 0xAD, 0x7D, 0xED, 0xF4, 0xE5, 0xE7, 0x38, 0x76, 0x3F, 0x69, 0x14,
    0x5A, 0x57, 0x1B, 0x24, 0x20, 0x12, 0xFB, 0x7A, 0xE0, 0x7F, 0xA9, 0xBA,
    0xAC, 0x3D, 0xF1, 0x02, 0xE0, 0x08, 0xB0, 0xE2, 0x79, 0x88, 0x59, 0x88,
    0x81, 0xD9, 0x20, 0xA9, 0xE6, 0x4F, 0x56, 0x15, 0xCD};

static const std::uint8_t res256[] = {0xF5, 0x8C, 0x4C, 0x04, 0xD6, 0xE5, 0xF1,
    0xBA, 0x77, 0x9E, 0xAB, 0xFB, 0x5F, 0x7B, 0xFB, 0xD6, 0x9C, 0xFC, 0x4E,
    0x96, 0x7E, 0xDB, 0x80, 0x8D, 0x67, 0x9F, 0x77, 0x7B, 0xC6, 0x70, 0x2C,
    0x7D, 0x39, 0xF2, 0x33, 0x69, 0xA9, 0xD9, 0xBA, 0xCF, 0xA5, 0x30, 0xE2,
    0x63, 0x04, 0x23, 0x14, 0x61, 0xB2, 0xEB, 0x05, 0xE2, 0xC3, 0x9B, 0xE9,
    0xFC, 0xDA, 0x6C, 0x19, 0x07, 0x8C, 0x6A, 0x9D, 0x1B};

int main()
{
    MCKL_EXAMPLE_RANDOM_AES(128)
    MCKL_EXAMPLE_RANDOM_AES(192)
    MCKL_EXAMPLE_RANDOM_AES(256)

    return 0;
}
