//============================================================================
// MCKL/example/random/include/random_rng_u01.hpp
//----------------------------------------------------------------------------
// MCKL: Monte Carlo Kernel Library
//----------------------------------------------------------------------------
// Copyright (c) 2013-2016, Yan Zhou
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
//   Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//============================================================================

#define MCKL_U01_USE_FIXED_POINT 0

#define MCKL_U01_USE_64BITS_DOUBLE 0

#include <mckl/random/seed.hpp>
#include <mckl/random/u01_distribution.hpp>
#include <@RNGHeader@>
#include "random_rng_u01.hpp"

void random_rng_load_seed(const std::string &basename)
{
    std::ifstream is(basename + ".seed");
    // clang-format off
    if (is)
        is >> mckl::Seed<@RNGType@>::instance();
    // clang-format on
}

void random_rng_store_seed(const std::string &basename)
{
    std::ofstream os(basename + ".seed");
    // clang-format off
    if (os)
        os << mckl::Seed<@RNGType@>::instance() << std::endl;
    // clang-format on
}

double random_rng_std()
{
    static constexpr std::size_t M = 1U << 12;
    static mckl::Vector<double> r(M);
    static std::size_t index = M;
    // clang-format off
    static @RNGType@ rng(mckl::Seed<@RNGType@>::instance().get());
    // clang-format on

    if (index == M) {
        std::uniform_real_distribution<double> u01;
        mckl::rand(rng, u01, M, r.data());
        index = 0;
    }

    return r[index++];
}

double random_rng_u01()
{
    static constexpr std::size_t M = 1U << 12;
    static mckl::Vector<double> r(M);
    static std::size_t index = M;
    // clang-format off
    static @RNGType@ rng(mckl::Seed<@RNGType@>::instance().get());
    // clang-format on

    if (index == M) {
        mckl::U01Distribution<double> u01;
        mckl::rand(rng, u01, M, r.data());
        index = 0;
    }

    return r[index++];
}

double random_rng_u01cc()
{
    static constexpr std::size_t M = 1U << 12;
    static mckl::Vector<double> r(M);
    static std::size_t index = M;
    // clang-format off
    static @RNGType@ rng(mckl::Seed<@RNGType@>::instance().get());
    // clang-format on

    if (index == M) {
        mckl::U01CCDistribution<double> u01;
        mckl::rand(rng, u01, M, r.data());
        index = 0;
    }

    return r[index++];
}

double random_rng_u01co()
{
    static constexpr std::size_t M = 1U << 12;
    static mckl::Vector<double> r(M);
    static std::size_t index = M;
    // clang-format off
    static @RNGType@ rng(mckl::Seed<@RNGType@>::instance().get());
    // clang-format on

    if (index == M) {
        mckl::U01CODistribution<double> u01;
        mckl::rand(rng, u01, M, r.data());
        index = 0;
    }

    return r[index++];
}

double random_rng_u01oc()
{
    static constexpr std::size_t M = 1U << 12;
    static mckl::Vector<double> r(M);
    static std::size_t index = M;
    // clang-format off
    static @RNGType@ rng(mckl::Seed<@RNGType@>::instance().get());
    // clang-format on

    if (index == M) {
        mckl::U01OCDistribution<double> u01;
        mckl::rand(rng, u01, M, r.data());
        index = 0;
    }

    return r[index++];
}

double random_rng_u01oo()
{
    static constexpr std::size_t M = 1U << 12;
    static mckl::Vector<double> r(M);
    static std::size_t index = M;
    // clang-format off
    static @RNGType@ rng(mckl::Seed<@RNGType@>::instance().get());
    // clang-format on

    if (index == M) {
        mckl::U01OODistribution<double> u01;
        mckl::rand(rng, u01, M, r.data());
        index = 0;
    }

    return r[index++];
}
