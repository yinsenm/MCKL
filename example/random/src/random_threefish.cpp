//============================================================================
// MCKL/example/random/src/random_threefish.cpp
//----------------------------------------------------------------------------
// MCKL: Monte Carlo Kernel Library
//----------------------------------------------------------------------------
// Copyright (c) 2013-2016, Yan Zhou
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
//   Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION); HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE);
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//============================================================================

#include <mckl/random/threefry.hpp>

#define MCKL_EXAMPLE_RANDOM_THREEFISH(N)                                      \
    typename mckl::Threefish##N::generator_type generator##N;                 \
    typename mckl::Threefish##N::key_type test_key##N;                        \
    typename mckl::Threefish##N::ctr_type test_ctr##N;                        \
    typename mckl::Threefish##N::ctr_type test_res##N;                        \
    std::array<typename mckl::Threefish##N::key_type::value_type, 2>          \
        test_tweak##N;                                                        \
    std::memcpy(test_key##N.data(), key##N, sizeof(test_key##N));             \
    std::memcpy(test_tweak##N.data(), tweak##N, sizeof(test_tweak##N));       \
    std::memcpy(test_ctr##N.data(), ctr##N, sizeof(test_ctr##N));             \
    mckl::internal::union_le<std::uint8_t>(test_key##N);                      \
    mckl::internal::union_le<std::uint8_t>(test_tweak##N);                    \
    generator##N.reset(test_key##N);                                          \
    generator##N.tweak(test_tweak##N[0], test_tweak##N[1]);                   \
    generator##N.enc(test_ctr##N.data(), test_res##N.data());                 \
    bool pass##N =                                                            \
        std::memcmp(test_res##N.data(), res##N, sizeof(test_res##N)) == 0;    \
    std::cout << std::setw(16) << std::left                                   \
              << std::string("Threefish-" #N ":")                             \
              << (pass##N ? "Passed" : "Failed") << std::endl;

static const std::uint8_t key256[] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22,
    0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
    0x2F};

static const std::uint8_t key512[] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22,
    0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
    0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
    0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
    0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F};

static const std::uint8_t key1024[] = {0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21,
    0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D,
    0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
    0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45,
    0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51,
    0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D,
    0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
    0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81,
    0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D,
    0x8E, 0x8F};

static const std::uint8_t tweak256[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

static const std::uint8_t tweak512[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

static const std::uint8_t tweak1024[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};

static const std::uint8_t ctr256[] = {0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9,
    0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xEF, 0xEE, 0xED,
    0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1,
    0xE0};

static const std::uint8_t ctr512[] = {0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9,
    0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xEF, 0xEE, 0xED,
    0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1,
    0xE0, 0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8, 0xD7, 0xD6, 0xD5,
    0xD4, 0xD3, 0xD2, 0xD1, 0xD0, 0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9,
    0xC8, 0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0};

static const std::uint8_t ctr1024[] = {0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA,
    0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0, 0xEF, 0xEE,
    0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2,
    0xE1, 0xE0, 0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8, 0xD7, 0xD6,
    0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0, 0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA,
    0xC9, 0xC8, 0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0, 0xBF, 0xBE,
    0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8, 0xB7, 0xB6, 0xB5, 0xB4, 0xB3, 0xB2,
    0xB1, 0xB0, 0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8, 0xA7, 0xA6,
    0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0, 0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A,
    0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8F, 0x8E,
    0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82,
    0x81, 0x80};

static const std::uint8_t res256[] = {0xE0, 0xD0, 0x91, 0xFF, 0x0E, 0xEA, 0x8F,
    0xDF, 0xC9, 0x81, 0x92, 0xE6, 0x2E, 0xD8, 0x0A, 0xD5, 0x9D, 0x86, 0x5D,
    0x08, 0x58, 0x8D, 0xF4, 0x76, 0x65, 0x70, 0x56, 0xB5, 0x95, 0x5E, 0x97,
    0xDF};

static const std::uint8_t res512[] = {0xE3, 0x04, 0x43, 0x96, 0x26, 0xD4, 0x5A,
    0x2C, 0xB4, 0x01, 0xCA, 0xD8, 0xD6, 0x36, 0x24, 0x9A, 0x63, 0x38, 0x33,
    0x0E, 0xB0, 0x6D, 0x45, 0xDD, 0x8B, 0x36, 0xB9, 0x0E, 0x97, 0x25, 0x47,
    0x79, 0x27, 0x2A, 0x0A, 0x8D, 0x99, 0x46, 0x35, 0x04, 0x78, 0x44, 0x20,
    0xEA, 0x18, 0xC9, 0xA7, 0x25, 0xAF, 0x11, 0xDF, 0xFE, 0xA1, 0x01, 0x62,
    0x34, 0x89, 0x27, 0x67, 0x3D, 0x5C, 0x1C, 0xAF, 0x3D};

static const std::uint8_t res1024[] = {0xA6, 0x65, 0x4D, 0xDB, 0xD7, 0x3C,
    0xC3, 0xB0, 0x5D, 0xD7, 0x77, 0x10, 0x5A, 0xA8, 0x49, 0xBC, 0xE4, 0x93,
    0x72, 0xEA, 0xAF, 0xFC, 0x55, 0x68, 0xD2, 0x54, 0x77, 0x1B, 0xAB, 0x85,
    0x53, 0x1C, 0x94, 0xF7, 0x80, 0xE7, 0xFF, 0xAA, 0xE4, 0x30, 0xD5, 0xD8,
    0xAF, 0x8C, 0x70, 0xEE, 0xBB, 0xE1, 0x76, 0x0F, 0x3B, 0x42, 0xB7, 0x37,
    0xA8, 0x9C, 0xB3, 0x63, 0x49, 0x0D, 0x67, 0x03, 0x14, 0xBD, 0x8A, 0xA4,
    0x1E, 0xE6, 0x3C, 0x2E, 0x1F, 0x45, 0xFB, 0xD4, 0x77, 0x92, 0x2F, 0x83,
    0x60, 0xB3, 0x88, 0xD6, 0x12, 0x5E, 0xA6, 0xC7, 0xAF, 0x0A, 0xD7, 0x05,
    0x6D, 0x01, 0x79, 0x6E, 0x90, 0xC8, 0x33, 0x13, 0xF4, 0x15, 0x0A, 0x57,
    0x16, 0xB3, 0x0E, 0xD5, 0xF5, 0x69, 0x28, 0x8A, 0xE9, 0x74, 0xCE, 0x2B,
    0x43, 0x47, 0x92, 0x6F, 0xCE, 0x57, 0xDE, 0x44, 0x51, 0x21, 0x77, 0xDD,
    0x7C, 0xDE};

int main()
{
    MCKL_EXAMPLE_RANDOM_THREEFISH(256)
    MCKL_EXAMPLE_RANDOM_THREEFISH(512)
    MCKL_EXAMPLE_RANDOM_THREEFISH(1024)

    return 0;
}
